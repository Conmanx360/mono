//
// This file was generated by resx2sr tool
//

partial class SR
{
	public const string InvalidQuery = "The Query string supplied was invalid or improperly formed";
	public const string InvalidQueryDuplicatedToken = "The Query string supplied was invalid because it contains a duplicate token";
	public const string InvalidQueryNullToken = "The Query string supplied was invalid because a supplied token was null";
	public const string WorkerThreadWakeupFailed = "Unable to wakeup the worker thread to create an object in MTA";
	public const string ClassNameNotInitializedException = "ClassName not initialized.";
	public const string ClassNameNotFoundException = "Class name does not match.";
	public const string CommentAttributeProperty = "Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.";
	public const string CommentAutoCommitProperty = "Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).";
	public const string CommentClassBegin = "An Early Bound class generated for the WMI class.";
	public const string CommentConstructors = "Below are different overloads of constructors to initialize an instance of the class with a WMI object.";
	public const string CommentCreatedClass = "Private property to hold the name of WMI class which created this class.";
	public const string CommentCreatedWmiNamespace = "Private property to hold the WMI namespace in which the class resides.";
	public const string CommentCurrentObject = "The current WMI object used";
	public const string CommentDateConversionFunction = "Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.";
	public const string CommentEmbeddedObject = "Private variable to hold the embedded property representing the instance.";
	public const string CommentEnumeratorImplementation = "Enumerator implementation for enumerating instances of the class.";
	public const string CommentFlagForEmbedded = "Flag to indicate if the instance is an embedded object.";
	public const string CommentGetInstances = "Different overloads of GetInstances() help in enumerating instances of the WMI class.";
	public const string CommentIsPropNull = "Functions Is<PropertyName>Null() are used to check if a property is NULL.";
	public const string CommentLateBoundObject = "Underlying lateBound WMI object.";
	public const string CommentLateBoundProperty = "Property returning the underlying lateBound object.";
	public const string CommentManagementPath = "The ManagementPath of the underlying WMI object.";
	public const string CommentManagementScope = "ManagementScope of the object.";
	public const string CommentOriginNamespace = "Property returns the namespace of the WMI class.";
	public const string CommentPrivateAutoCommit = "Member variable to store the 'automatic commit' behavior for the class.";
	public const string CommentPrototypeConverter = "TypeConverter to handle null values for ValueType properties";
	public const string CommentResetProperty = "Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.";
	public const string CommentShouldSerialize = "Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.";
	public const string CommentStaticManagementScope = "Private member variable to hold the ManagementScope which is used by the various methods.";
	public const string CommentStaticScopeProperty = "Public static scope property which is used by the various methods.";
	public const string CommentSystemObject = "Property pointing to an embedded object to get System properties of the WMI object.";
	public const string CommentSystemPropertiesClass = "Embedded class to represent WMI system Properties.";
	public const string CommentTimeSpanConvertionFunction = "Time interval functions  ToTimeSpan and ToDmtfTimeInterval are added to the class to convert DMTF Time Interval to  System.TimeSpan and vice-versa.";
	public const string CommentToDateTime = "Converts a given datetime in DMTF format to System.DateTime object.";
	public const string CommentToDmtfDateTime = "Converts a given System.DateTime object to DMTF datetime format.";
	public const string CommentToDmtfTimeInterval = "Converts a given System.TimeSpan object to DMTF Time interval format.";
	public const string CommentToTimeSpan = "Converts a given time interval in DMTF format to System.TimeSpan object.";
	public const string EmbeddedComment = "If the embedded property is strongly typed then, to strongly type the property to the type of";
	public const string EmbeddedComment2 = "the embedded object, you have to do the following things.";
	public const string EmbeddedComment3 = "\\t1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.";
	public const string EmbeddedComment4 = "\\t2. Include the namespace of the generated class.";
	public const string EmbeddedComment5 = "\\t3. Change the property get/set functions so as return the instance of the Managed class.";
	public const string EmbeddedComment6 = "Below is a sample code.";
	public const string EmbeddedComment7 = "VB Code";
	public const string EmbeddedComment8 = "C# Code";
	public const string EmbeddedCSharpComment1 = "public <ManagedClassName of Embedded property> <PropertyName>";
	public const string EmbeddedCSharpComment10 = "\\t\\tIf (AutoCommitProp == true && isEmbedded == false)";
	public const string EmbeddedCSharpComment11 = "\\t\\t{";
	public const string EmbeddedCSharpComment12 = "\\t\\t\\tPrivateLateBoundObject.Put();";
	public const string EmbeddedCSharpComment13 = "\\t\\t}";
	public const string EmbeddedCSharpComment14 = "\\t}";
	public const string EmbeddedCSharpComment15 = "}";
	public const string EmbeddedCSharpComment2 = "{";
	public const string EmbeddedCSharpComment3 = "\\tget";
	public const string EmbeddedCSharpComment4 = "\\t{";
	public const string EmbeddedCSharpComment5 = "\\t\\treturn new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj[\"<PropertyName>\"]));";
	public const string EmbeddedCSharpComment6 = "\\t}";
	public const string EmbeddedCSharpComment7 = "\\tset";
	public const string EmbeddedCSharpComment8 = "\\t{";
	public const string EmbeddedCSharpComment9 = "\\t\\tcurObj[\"<PropertyName>\"] = value.LateBoundObject;";
	public const string EmbeddedVisualBasicComment1 = "Public Property <PropertyName>() As <ManagedClassName of Embedded property>";
	public const string EmbeddedVisualBasicComment10 = "\\tEnd Set";
	public const string EmbeddedVisualBasicComment2 = "\\tGet";
	public const string EmbeddedVisualBasicComment3 = "\\t\\tReturn New <ManagedClassName of Embedded Property>(CType(curObj(\"<PropertyName>\"),System.Management.ManagementBaseObject))";
	public const string EmbeddedVisualBasicComment4 = "\\tEnd Get";
	public const string EmbeddedVisualBasicComment5 = "\\tSet(ByVal Value As <ManagedClassName of Embedded property>)";
	public const string EmbeddedVisualBasicComment6 = "\\t\\tcurObj(\"EObject\")=Value.LateBoundObject";
	public const string EmbeddedVisualBasicComment7 = "\\t\\tIf (AutoCommitProp = True And isEmbedded = False) Then";
	public const string EmbeddedVisualBasicComment8 = "\\t\\t\\tPrivateLateBoundObject.Put()";
	public const string EmbeddedVisualBasicComment9 = "\\t\\tEnd If";
	public const string EmptyFilePathException = "FilePath cannot be empty.";
	public const string NamespaceNotInitializedException = "Namespace not initialized.";
	public const string NullFilePathException = "FilePath or code generator object is null.";
	public const string UnableToCreateCodeGeneratorException = "Unable to create code generator for '{0}'";
	public const string PlatformNotSupported_SystemManagement = "System.Management currently is only supported for Windows desktop applications.";
	public const string PlatformNotSupported_FullFrameworkRequired = "Could not find an installation of .NET Framework v4.0.30319. System.Management requires native modules from the .NET Framework to operate.";
	public const string LoadLibraryFailed = "Failed to load required native library '{0}'.";
	public const string PlatformNotSupported_FrameworkUpdatedRequired = "The native library '{0}' does not have all required functions. Please, update the .NET Framework.";
}
